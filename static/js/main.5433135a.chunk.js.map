{"version":3,"sources":["components/Card/Card.js","components/Cards/Cards.js","components/Searchbox/Searchbox.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","this","props","className","src","id","alt","name","email","React","Component","Cards","monsters","map","key","Searchbox","type","placeholder","onChange","handlechange","Footer","Date","getFullYear","App","state","searchInput","e","setState","target","value","fetch","then","res","json","data","catch","err","console","log","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sSAkBeA,G,6KAdD,IACEC,EAAYC,KAAKC,MAAjBF,QACR,OACI,yBAAKG,UAAU,8BACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeC,IAAG,+BAA0BJ,EAAQK,GAAlC,0BAA8DC,IAAI,YACnG,4BAAKN,EAAQO,MACb,2BAAIP,EAAQQ,a,GARbC,IAAMC,YCaVC,E,uKAVP,OACI,oCACKV,KAAKC,MAAMU,SAASC,KAAI,SAAAb,GAAO,OAC5B,kBAAC,EAAD,CAAMA,QAASA,EAASc,IAAKd,EAAQK,a,GALrCI,IAAMC,WCaXK,G,6KAZP,OACI,oCACI,2BACIC,KAAK,SACLC,YAAY,gBACZC,SAAUjB,KAAKC,MAAMiB,oB,GAPjBV,IAAMC,YCUfU,G,6KARP,OACI,8CACiB,2CADjB,UAC6C,IAAIC,MAAOC,mB,GAJ/Cb,IAAMC,YC0CZa,G,kNApCbC,MAAQ,CACNZ,SAAU,GACVa,YAAa,I,EAUfN,aAAe,SAACO,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,kEARnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAAEf,SAAUsB,OACvCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAOpB,IAAD,EAC2BnC,KAAKuB,MAA/BZ,EADD,EACCA,SAAUa,EADX,EACWA,YACZc,EAAmB3B,EAAS4B,QAAO,SAAAxC,GAAO,OAC9CA,EAAQO,KAAKkC,cAAcC,SAASjB,EAAYgB,kBAElD,OACE,oCACE,yBAAKtC,UAAU,aACb,4CACA,kBAAC,EAAD,CAAWgB,aAAclB,KAAKkB,eAC9B,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAOS,SAAU2B,MAGrB,kBAAC,EAAD,W,GA/BU9B,IAAMC,YCIJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.5433135a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nclass Card extends React.Component {\r\n    render() {\r\n        const { monster } = this.props;\r\n        return (\r\n            <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                <div className=\"card\">\r\n                    <img className=\"card-img-top\" src={`https://robohash.org/${monster.id}?set=set4&size=180x180`} alt=\"monster\" />\r\n                    <h2>{monster.name}</h2>\r\n                    <p>{monster.email}</p>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\n\r\nclass Cards extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.monsters.map(monster =>\r\n                    <Card monster={monster} key={monster.id} />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;","import React from 'react'\r\nimport './Searchbox.css';\r\n\r\nclass Searchbox extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <input\r\n                    type=\"search\"\r\n                    placeholder=\"search robots\"\r\n                    onChange={this.props.handlechange}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                Made by&nbsp;<p>Matei Mircea</p>&nbsp;@ {new Date().getFullYear()}\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Cards from './components/Cards/Cards';\nimport SearchBox from './components/Searchbox/Searchbox';\nimport Footer from './components/Footer/Footer';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  state = {\n    monsters: [],\n    searchInput: ''\n  }\n\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => res.json())\n      .then(data => this.setState({ monsters: data }))\n      .catch(err => console.log(err));\n  }\n\n  handlechange = (e) => {\n    this.setState({ searchInput: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchInput } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchInput.toLowerCase()))\n\n    return (\n      <>\n        <div className=\"container\">\n          <h1>Cats Rolodex</h1>\n          <SearchBox handlechange={this.handlechange} />\n          <div className=\"row\">\n            <Cards monsters={filteredMonsters} />\n          </div>\n        </div>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}